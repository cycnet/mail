// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (0d437335).
//
// jmail.tlh
//
// C++ source equivalent of Win32 type library jmail.dll
// compiler-generated file created 07/14/14 at 11:57:55 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

namespace jmail {

//
// Forward references and typedefs
//

struct __declspec(uuid("607a06fe-2fda-4adc-854d-d016d98d83db"))
/* dual interface */ IPOP3;
struct /* coclass */ POP3;
struct __declspec(uuid("684130b2-2b8a-4e8d-be71-8f4052882076"))
/* dual interface */ IMessages;
struct /* coclass */ Messages;
struct __declspec(uuid("3a037057-57f0-4904-a1e0-ad0ea2fb564e"))
/* dual interface */ IMessage;
struct /* coclass */ Message;
struct __declspec(uuid("cf2ed965-e0ba-4fe4-ade2-38bd48f112e8"))
/* dual interface */ IHeaders;
struct /* coclass */ Headers;
struct __declspec(uuid("56930358-ad72-408f-83c4-a2b0dc8037b2"))
/* dual interface */ IRecipients;
struct /* coclass */ Recipients;
struct __declspec(uuid("65c53be7-ed21-4c25-b189-da0e8fad5231"))
/* dual interface */ IRecipient;
struct /* coclass */ Recipient;
struct __declspec(uuid("1e6d8684-755d-4847-bf40-68ec5e4bc1e9"))
/* dual interface */ IAttachments;
struct /* coclass */ Attachments;
struct __declspec(uuid("952f0b99-50b6-44b3-ae0d-700d5b98b416"))
/* dual interface */ IAttachment;
struct /* coclass */ Attachment;
struct __declspec(uuid("aed3a6b1-2171-11d2-b77c-0008c73aca8f"))
/* dual interface */ ISMTPMail;
struct /* coclass */ SMTPMail;
struct __declspec(uuid("14e61a41-8846-11d2-b7e4-0008c73aca8f"))
/* dual interface */ IPOP3Mail;
struct /* coclass */ POP3Mail;
struct __declspec(uuid("23e86816-772b-4b28-a924-a135cff6469a"))
/* dual interface */ IPGPKeys;
struct /* coclass */ PGPKeys;
struct __declspec(uuid("b89d0e7a-0f5b-40ee-8af3-08fa2ed9534f"))
/* dual interface */ IPGPKeyInfo;
struct /* coclass */ PGPKeyInfo;
struct __declspec(uuid("0c21b3b1-2b11-45f2-8a9e-dcc5032de98a"))
/* dual interface */ IMailMerge;
struct /* coclass */ MailMerge;
struct __declspec(uuid("821aafe5-2f19-47eb-aca9-3b4c1d64ac27"))
/* dual interface */ ISpeedMailer;
struct /* coclass */ SpeedMailer;
struct __declspec(uuid("e05aea1e-bcb1-473a-8b2a-4829d9e1ad23"))
/* dual interface */ IPGPDecodeResult;
struct /* coclass */ PGPDecodeResult;
struct __declspec(uuid("08b9999c-dad2-4353-b25b-8ccaffca4d16"))
/* dual interface */ IPGPDecodeResults;
struct /* coclass */ PGPDecodeResults;
struct __declspec(uuid("41dba1fa-44f6-4bd5-82df-1a7fdea0475d"))
/* dual interface */ IPGPDecodeResultCollection;
struct /* coclass */ PGPDecodeResultCollection;
struct __declspec(uuid("05a0bddf-8823-4cb7-95be-7b3d6292a745"))
/* dual interface */ IMailMergeResult;
struct /* coclass */ MailMergeResult;
struct __declspec(uuid("3f88fa4e-551c-4a72-a436-12f0a35e3d74"))
/* dual interface */ IMailMergeResultCollection;
struct /* coclass */ MailMergeResultCollection;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IPOP3, __uuidof(IPOP3));
_COM_SMARTPTR_TYPEDEF(IMessages, __uuidof(IMessages));
_COM_SMARTPTR_TYPEDEF(IMessage, __uuidof(IMessage));
_COM_SMARTPTR_TYPEDEF(IHeaders, __uuidof(IHeaders));
_COM_SMARTPTR_TYPEDEF(IRecipients, __uuidof(IRecipients));
_COM_SMARTPTR_TYPEDEF(IRecipient, __uuidof(IRecipient));
_COM_SMARTPTR_TYPEDEF(IAttachments, __uuidof(IAttachments));
_COM_SMARTPTR_TYPEDEF(IAttachment, __uuidof(IAttachment));
_COM_SMARTPTR_TYPEDEF(ISMTPMail, __uuidof(ISMTPMail));
_COM_SMARTPTR_TYPEDEF(IPOP3Mail, __uuidof(IPOP3Mail));
_COM_SMARTPTR_TYPEDEF(IPGPKeys, __uuidof(IPGPKeys));
_COM_SMARTPTR_TYPEDEF(IPGPKeyInfo, __uuidof(IPGPKeyInfo));
_COM_SMARTPTR_TYPEDEF(IMailMerge, __uuidof(IMailMerge));
_COM_SMARTPTR_TYPEDEF(ISpeedMailer, __uuidof(ISpeedMailer));
_COM_SMARTPTR_TYPEDEF(IPGPDecodeResult, __uuidof(IPGPDecodeResult));
_COM_SMARTPTR_TYPEDEF(IPGPDecodeResults, __uuidof(IPGPDecodeResults));
_COM_SMARTPTR_TYPEDEF(IPGPDecodeResultCollection, __uuidof(IPGPDecodeResultCollection));
_COM_SMARTPTR_TYPEDEF(IMailMergeResult, __uuidof(IMailMergeResult));
_COM_SMARTPTR_TYPEDEF(IMailMergeResultCollection, __uuidof(IMailMergeResultCollection));

//
// Type library items
//

struct __declspec(uuid("607a06fe-2fda-4adc-854d-d016d98d83db"))
IPOP3 : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetSize))
    long Size;
    __declspec(property(get=GetMessages))
    IMessagesPtr Messages;
    __declspec(property(get=GetLog))
    _bstr_t Log;
    __declspec(property(get=GetLogging,put=PutLogging))
    VARIANT_BOOL Logging;
    __declspec(property(get=GetTimeout,put=PutTimeout))
    long Timeout;

    //
    // Wrapper methods for error-handling
    //

    HRESULT Connect (
        _bstr_t Username,
        _bstr_t Password,
        _bstr_t Server,
        long Port );
    HRESULT Disconnect ( );
    _bstr_t GetLog ( );
    VARIANT_BOOL GetLogging ( );
    void PutLogging (
        VARIANT_BOOL Log );
    long GetCount ( );
    long GetSize ( );
    IMessagesPtr GetMessages ( );
    long GetLastUnreadMessage ( );
    HRESULT DownloadSingleHeader (
        long MessageID );
    HRESULT DeleteSingleMessage (
        long MessageID );
    HRESULT DownloadHeaders ( );
    HRESULT DownloadMessages ( );
    _bstr_t GetMessageUID (
        long MessageID );
    HRESULT DeleteMessages ( );
    HRESULT DownloadUnreadMessages ( );
    IMessagePtr DownloadSingleMessage (
        long index );
    long GetTimeout ( );
    void PutTimeout (
        long Value );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Connect (
        BSTR Username,
        BSTR Password,
        BSTR Server,
        long Port ) = 0;
    virtual HRESULT __stdcall raw_Disconnect ( ) = 0;
    virtual HRESULT __stdcall get_Log (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_Logging (
        VARIANT_BOOL * Log ) = 0;
    virtual HRESULT __stdcall put_Logging (
        VARIANT_BOOL Log ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * Value ) = 0;
    virtual HRESULT __stdcall get_Size (
        long * Value ) = 0;
    virtual HRESULT __stdcall get_Messages (
        struct IMessages * * Value ) = 0;
    virtual HRESULT __stdcall raw_GetLastUnreadMessage (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_DownloadSingleHeader (
        long MessageID ) = 0;
    virtual HRESULT __stdcall raw_DeleteSingleMessage (
        long MessageID ) = 0;
    virtual HRESULT __stdcall raw_DownloadHeaders ( ) = 0;
    virtual HRESULT __stdcall raw_DownloadMessages ( ) = 0;
    virtual HRESULT __stdcall raw_GetMessageUID (
        long MessageID,
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_DeleteMessages ( ) = 0;
    virtual HRESULT __stdcall raw_DownloadUnreadMessages ( ) = 0;
    virtual HRESULT __stdcall raw_DownloadSingleMessage (
        long index,
        struct IMessage * * result ) = 0;
    virtual HRESULT __stdcall get_Timeout (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Timeout (
        long Value ) = 0;
};

struct __declspec(uuid("f812b147-0e26-4222-8ee4-9f753cd2b39c"))
POP3;
    // [ default ] interface IPOP3

struct __declspec(uuid("684130b2-2b8a-4e8d-be71-8f4052882076"))
IMessages : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem,put=PutItem))
    IMessagePtr Item[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Clear ( );
    IMessagePtr GetItem (
        long index );
    void PutItem (
        long index,
        struct IMessage * Value );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_Clear ( ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IMessage * * Value ) = 0;
    virtual HRESULT __stdcall put_Item (
        long index,
        struct IMessage * Value ) = 0;
};

struct __declspec(uuid("a62c8bdb-d1fc-4fdd-a2a2-eeff73262a41"))
Messages;
    // [ default ] interface IMessages

struct __declspec(uuid("3a037057-57f0-4904-a1e0-ad0ea2fb564e"))
IMessage : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBodyText))
    _bstr_t BodyText;
    __declspec(property(get=GetDate))
    DATE Date;
    __declspec(property(get=GetEnvelope,put=PutEnvelope))
    IUnknownPtr Envelope;
    __declspec(property(get=GetSize))
    long Size;
    __declspec(property(get=GetHeaders))
    IHeadersPtr Headers;
    __declspec(property(get=GetRecipients))
    IRecipientsPtr Recipients;
    __declspec(property(get=GetAttachments))
    IAttachmentsPtr Attachments;
    __declspec(property(get=GetReplyTo,put=PutReplyTo))
    _bstr_t ReplyTo;
    __declspec(property(get=GetText))
    _bstr_t Text;
    __declspec(property(get=GetHideRecipients,put=PutHideRecipients))
    _bstr_t HideRecipients;
    __declspec(property(get=GetMailDomain,put=PutMailDomain))
    _bstr_t MailDomain;
    __declspec(property(get=GetCharset,put=PutCharset))
    _bstr_t Charset;
    __declspec(property(get=GetContentTransferEncoding,put=PutContentTransferEncoding))
    _bstr_t ContentTransferEncoding;
    __declspec(property(get=GetMimeVersion,put=PutMimeVersion))
    _bstr_t MimeVersion;
    __declspec(property(get=GetEncoding,put=PutEncoding))
    _bstr_t Encoding;
    __declspec(property(get=GetReturnReceipt,put=PutReturnReceipt))
    VARIANT_BOOL ReturnReceipt;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetFrom,put=PutFrom))
    _bstr_t From;
    __declspec(property(get=GetFromName,put=PutFromName))
    _bstr_t FromName;
    __declspec(property(get=GetBody,put=PutBody))
    _bstr_t Body;
    __declspec(property(get=GetPriority,put=PutPriority))
    unsigned char Priority;
    __declspec(property(get=GetContentType,put=PutContentType))
    _bstr_t ContentType;
    __declspec(property(get=GetLog))
    _bstr_t Log;
    __declspec(property(get=GetLogging,put=PutLogging))
    VARIANT_BOOL Logging;
    __declspec(property(get=GetHTMLBody,put=PutHTMLBody))
    _bstr_t HTMLBody;
    __declspec(property(get=GetISOEncodeHeaders,put=PutISOEncodeHeaders))
    VARIANT_BOOL ISOEncodeHeaders;
    __declspec(property(get=GetUsePipelining,put=PutUsePipelining))
    VARIANT_BOOL UsePipelining;
    __declspec(property(get=GetSilent,put=PutSilent))
    VARIANT_BOOL Silent;
    __declspec(property(get=GetErrorCode))
    long ErrorCode;
    __declspec(property(get=GetErrorMessage))
    _bstr_t ErrorMessage;
    __declspec(property(get=GetErrorSource))
    _bstr_t ErrorSource;
    __declspec(property(get=GetSimpleLayout,put=PutSimpleLayout))
    VARIANT_BOOL SimpleLayout;
    __declspec(property(get=GetRecipientsString))
    _bstr_t RecipientsString;
    __declspec(property(get=GetDeferredDelivery,put=PutDeferredDelivery))
    DATE DeferredDelivery;
    __declspec(property(get=GetMailData))
    _bstr_t MailData;
    __declspec(property(get=GetAbout))
    _bstr_t About;
    __declspec(property(get=GetEncryptAttachments,put=PutEncryptAttachments))
    VARIANT_BOOL EncryptAttachments;
    __declspec(property(get=GetMsPickupdirectory,put=PutMsPickupdirectory))
    _bstr_t MsPickupdirectory;
    __declspec(property(get=GetPGPEncrypt,put=PutPGPEncrypt))
    VARIANT_BOOL PGPEncrypt;
    __declspec(property(get=GetPGPSign,put=PutPGPSign))
    VARIANT_BOOL PGPSign;
    __declspec(property(get=GetPGPPassphrase,put=PutPGPPassphrase))
    _bstr_t PGPPassphrase;
    __declspec(property(get=GetPGPSignkey,put=PutPGPSignkey))
    _bstr_t PGPSignkey;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetMailServerUserName,put=PutMailServerUserName))
    _bstr_t MailServerUserName;
    __declspec(property(get=GetMailServerPassWord,put=PutMailServerPassWord))
    _bstr_t MailServerPassWord;
    __declspec(property(get=GetEnableCharsetTranslation,put=PutEnableCharsetTranslation))
    VARIANT_BOOL EnableCharsetTranslation;
    __declspec(property(get=GetNoAutoContentID,put=PutNoAutoContentID))
    VARIANT_BOOL NoAutoContentID;

    //
    // Wrapper methods for error-handling
    //

    DATE GetDate ( );
    long GetSize ( );
    HRESULT LoadFromStream (
        IUnknown * Stream );
    HRESULT SaveToStream (
        IUnknown * Stream );
    HRESULT ParseMessage (
        _bstr_t MessageSource );
    _bstr_t GetText ( );
    IHeadersPtr GetHeaders ( );
    IRecipientsPtr GetRecipients ( );
    IAttachmentsPtr GetAttachments ( );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t Value );
    _bstr_t GetFrom ( );
    void PutFrom (
        _bstr_t Value );
    _bstr_t GetFromName ( );
    void PutFromName (
        _bstr_t Value );
    _bstr_t GetBody ( );
    void PutBody (
        _bstr_t Value );
    unsigned char GetPriority ( );
    void PutPriority (
        unsigned char Value );
    _bstr_t GetContentType ( );
    void PutContentType (
        _bstr_t Value );
    VARIANT_BOOL Send (
        _bstr_t mailServer,
        VARIANT_BOOL enque );
    _bstr_t GetBodyText ( );
    _bstr_t DecodeHeader (
        _bstr_t Header );
    HRESULT SendToNewsGroup (
        _bstr_t ServerName,
        _bstr_t Newsgroups );
    IUnknownPtr GetEnvelope ( );
    void PutEnvelope (
        IUnknown * Value );
    _bstr_t GetMsPickupdirectory ( );
    void PutMsPickupdirectory (
        _bstr_t Value );
    HRESULT nq ( );
    IPGPKeysPtr KeyInformation (
        _bstr_t keyIdentifier );
    VARIANT_BOOL GetPGPEncrypt ( );
    void PutPGPEncrypt (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetPGPSign ( );
    void PutPGPSign (
        VARIANT_BOOL Value );
    _bstr_t GetPGPPassphrase ( );
    void PutPGPPassphrase (
        _bstr_t passPhrase );
    _bstr_t GetPGPSignkey ( );
    void PutPGPSignkey (
        _bstr_t signKey );
    _bstr_t GetReplyTo ( );
    void PutReplyTo (
        _bstr_t Value );
    _bstr_t GetHideRecipients ( );
    void PutHideRecipients (
        _bstr_t Value );
    _bstr_t GetMailDomain ( );
    void PutMailDomain (
        _bstr_t Value );
    _bstr_t GetCharset ( );
    void PutCharset (
        _bstr_t Value );
    _bstr_t GetContentTransferEncoding ( );
    void PutContentTransferEncoding (
        _bstr_t Value );
    _bstr_t GetMimeVersion ( );
    void PutMimeVersion (
        _bstr_t Value );
    _bstr_t GetEncoding ( );
    void PutEncoding (
        _bstr_t Value );
    VARIANT_BOOL GetReturnReceipt ( );
    void PutReturnReceipt (
        VARIANT_BOOL Value );
    HRESULT LogCustomMessage (
        _bstr_t Message );
    _bstr_t GetLog ( );
    VARIANT_BOOL GetLogging ( );
    void PutLogging (
        VARIANT_BOOL Value );
    _bstr_t GetHTMLBody ( );
    void PutHTMLBody (
        _bstr_t Value );
    HRESULT Close ( );
    VARIANT_BOOL GetISOEncodeHeaders ( );
    void PutISOEncodeHeaders (
        VARIANT_BOOL Value );
    HRESULT ClearCustomHeaders ( );
    VARIANT_BOOL GetUsePipelining ( );
    void PutUsePipelining (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetSilent ( );
    void PutSilent (
        VARIANT_BOOL Value );
    long GetErrorCode ( );
    _bstr_t GetErrorMessage ( );
    _bstr_t GetErrorSource ( );
    VARIANT_BOOL GetSimpleLayout ( );
    void PutSimpleLayout (
        VARIANT_BOOL Value );
    HRESULT GetMessageBodyFromURL (
        _bstr_t bstrURL,
        _bstr_t bstrAuth );
    _bstr_t AddURLAttachment (
        _bstr_t bstrURL,
        _bstr_t bstrAttachAs,
        VARIANT_BOOL isInline,
        _bstr_t bstrAuth );
    HRESULT ExtractEmailAddressesFromURL (
        _bstr_t bstrURL,
        _bstr_t bstrAuth );
    _bstr_t GetRecipientsString ( );
    DATE GetDeferredDelivery ( );
    void PutDeferredDelivery (
        DATE Value );
    _bstr_t GetMailData ( );
    _bstr_t GetAbout ( );
    HRESULT AddRecipient (
        _bstr_t emailAddress,
        _bstr_t recipientName,
        _bstr_t PGPKey );
    HRESULT AddRecipientCC (
        _bstr_t emailAddress,
        _bstr_t recipientName,
        _bstr_t PGPKey );
    HRESULT AddRecipientBCC (
        _bstr_t emailAddress,
        _bstr_t PGPKey );
    _bstr_t GetVersion ( );
    VARIANT_BOOL VerifyKeys (
        _bstr_t keyString );
    HRESULT ClearRecipients ( );
    HRESULT ClearAttachments ( );
    HRESULT AppendBodyFromFile (
        _bstr_t FileName );
    HRESULT AppendText (
        _bstr_t Text );
    _bstr_t AddAttachment (
        _bstr_t FileName,
        VARIANT_BOOL isInline,
        _bstr_t ContentType );
    _bstr_t AddCustomAttachment (
        _bstr_t FileName,
        _bstr_t Data,
        VARIANT_BOOL isInline );
    HRESULT AddHeader (
        _bstr_t XHeader,
        _bstr_t Value );
    HRESULT AddNativeHeader (
        _bstr_t Header,
        _bstr_t Value );
    VARIANT_BOOL GetEncryptAttachments ( );
    void PutEncryptAttachments (
        VARIANT_BOOL Value );
    _bstr_t GetMailServerUserName ( );
    void PutMailServerUserName (
        _bstr_t Value );
    _bstr_t GetMailServerPassWord ( );
    void PutMailServerPassWord (
        _bstr_t Value );
    HRESULT Clear ( );
    HRESULT AppendHTML (
        _bstr_t Text );
    IPGPDecodeResultsPtr PGPDecode (
        VARIANT_BOOL DecodeBody,
        VARIANT_BOOL DecodeAttachments );
    VARIANT_BOOL GetEnableCharsetTranslation ( );
    void PutEnableCharsetTranslation (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetNoAutoContentID ( );
    void PutNoAutoContentID (
        VARIANT_BOOL Value );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Date (
        DATE * Value ) = 0;
    virtual HRESULT __stdcall get_Size (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_LoadFromStream (
        IUnknown * Stream ) = 0;
    virtual HRESULT __stdcall raw_SaveToStream (
        IUnknown * Stream ) = 0;
    virtual HRESULT __stdcall raw_ParseMessage (
        BSTR MessageSource ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_Headers (
        struct IHeaders * * Value ) = 0;
    virtual HRESULT __stdcall get_Recipients (
        struct IRecipients * * Value ) = 0;
    virtual HRESULT __stdcall get_Attachments (
        struct IAttachments * * Value ) = 0;
    virtual HRESULT __stdcall get_Subject (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_Subject (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_From (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_From (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_FromName (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_FromName (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_Body (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_Body (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_Priority (
        unsigned char * Value ) = 0;
    virtual HRESULT __stdcall put_Priority (
        unsigned char Value ) = 0;
    virtual HRESULT __stdcall get_ContentType (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_ContentType (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall raw_Send (
        BSTR mailServer,
        VARIANT_BOOL enque,
        VARIANT_BOOL * RetVal ) = 0;
    virtual HRESULT __stdcall get_BodyText (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_DecodeHeader (
        BSTR Header,
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_SendToNewsGroup (
        BSTR ServerName,
        BSTR Newsgroups ) = 0;
    virtual HRESULT __stdcall get_Envelope (
        IUnknown * * Value ) = 0;
    virtual HRESULT __stdcall put_Envelope (
        IUnknown * Value ) = 0;
    virtual HRESULT __stdcall get_MsPickupdirectory (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_MsPickupdirectory (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall raw_nq ( ) = 0;
    virtual HRESULT __stdcall raw_KeyInformation (
        BSTR keyIdentifier,
        struct IPGPKeys * * PGPKeys ) = 0;
    virtual HRESULT __stdcall get_PGPEncrypt (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_PGPEncrypt (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_PGPSign (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_PGPSign (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_PGPPassphrase (
        BSTR * passPhrase ) = 0;
    virtual HRESULT __stdcall put_PGPPassphrase (
        BSTR passPhrase ) = 0;
    virtual HRESULT __stdcall get_PGPSignkey (
        BSTR * signKey ) = 0;
    virtual HRESULT __stdcall put_PGPSignkey (
        BSTR signKey ) = 0;
    virtual HRESULT __stdcall get_ReplyTo (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_ReplyTo (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_HideRecipients (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_HideRecipients (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_MailDomain (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_MailDomain (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_Charset (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_Charset (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_ContentTransferEncoding (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_ContentTransferEncoding (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_MimeVersion (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_MimeVersion (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_Encoding (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_Encoding (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_ReturnReceipt (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ReturnReceipt (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall raw_LogCustomMessage (
        BSTR Message ) = 0;
    virtual HRESULT __stdcall get_Log (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_Logging (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Logging (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_HTMLBody (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_HTMLBody (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall raw_Close ( ) = 0;
    virtual HRESULT __stdcall get_ISOEncodeHeaders (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ISOEncodeHeaders (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall raw_ClearCustomHeaders ( ) = 0;
    virtual HRESULT __stdcall get_UsePipelining (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_UsePipelining (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Silent (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Silent (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_ErrorCode (
        long * Value ) = 0;
    virtual HRESULT __stdcall get_ErrorMessage (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_ErrorSource (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_SimpleLayout (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_SimpleLayout (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall raw_GetMessageBodyFromURL (
        BSTR bstrURL,
        BSTR bstrAuth ) = 0;
    virtual HRESULT __stdcall raw_AddURLAttachment (
        BSTR bstrURL,
        BSTR bstrAttachAs,
        VARIANT_BOOL isInline,
        BSTR bstrAuth,
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_ExtractEmailAddressesFromURL (
        BSTR bstrURL,
        BSTR bstrAuth ) = 0;
    virtual HRESULT __stdcall get_RecipientsString (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_DeferredDelivery (
        DATE * Value ) = 0;
    virtual HRESULT __stdcall put_DeferredDelivery (
        DATE Value ) = 0;
    virtual HRESULT __stdcall get_MailData (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_About (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_AddRecipient (
        BSTR emailAddress,
        BSTR recipientName,
        BSTR PGPKey ) = 0;
    virtual HRESULT __stdcall raw_AddRecipientCC (
        BSTR emailAddress,
        BSTR recipientName,
        BSTR PGPKey ) = 0;
    virtual HRESULT __stdcall raw_AddRecipientBCC (
        BSTR emailAddress,
        BSTR PGPKey ) = 0;
    virtual HRESULT __stdcall get_Version (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_VerifyKeys (
        BSTR keyString,
        VARIANT_BOOL * allOK ) = 0;
    virtual HRESULT __stdcall raw_ClearRecipients ( ) = 0;
    virtual HRESULT __stdcall raw_ClearAttachments ( ) = 0;
    virtual HRESULT __stdcall raw_AppendBodyFromFile (
        BSTR FileName ) = 0;
    virtual HRESULT __stdcall raw_AppendText (
        BSTR Text ) = 0;
    virtual HRESULT __stdcall raw_AddAttachment (
        BSTR FileName,
        VARIANT_BOOL isInline,
        BSTR ContentType,
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_AddCustomAttachment (
        BSTR FileName,
        BSTR Data,
        VARIANT_BOOL isInline,
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_AddHeader (
        BSTR XHeader,
        BSTR Value ) = 0;
    virtual HRESULT __stdcall raw_AddNativeHeader (
        BSTR Header,
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_EncryptAttachments (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_EncryptAttachments (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_MailServerUserName (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_MailServerUserName (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_MailServerPassWord (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_MailServerPassWord (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall raw_Clear ( ) = 0;
    virtual HRESULT __stdcall raw_AppendHTML (
        BSTR Text ) = 0;
    virtual HRESULT __stdcall raw_PGPDecode (
        VARIANT_BOOL DecodeBody,
        VARIANT_BOOL DecodeAttachments,
        struct IPGPDecodeResults * * RetVal ) = 0;
    virtual HRESULT __stdcall get_EnableCharsetTranslation (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_EnableCharsetTranslation (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_NoAutoContentID (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_NoAutoContentID (
        VARIANT_BOOL Value ) = 0;
};

struct __declspec(uuid("e5ff9f62-0e7c-4372-8ad5-da7d2418070c"))
Message;
    // [ default ] interface IMessage

struct __declspec(uuid("cf2ed965-e0ba-4fe4-ade2-38bd48f112e8"))
IHeaders : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetText))
    _bstr_t Text;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetHeader (
        _bstr_t Headername );
    _bstr_t GetText ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_GetHeader (
        BSTR Headername,
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_Text (
        BSTR * Value ) = 0;
};

struct __declspec(uuid("b1cc9084-0177-4136-9b1b-c06c061f1e1d"))
Headers;
    // [ default ] interface IHeaders

struct __declspec(uuid("56930358-ad72-408f-83c4-a2b0dc8037b2"))
IRecipients : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IRecipientPtr Item[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IRecipientPtr GetItem (
        long index );
    HRESULT Add (
        struct IRecipient * Value );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * Value ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IRecipient * * Value ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct IRecipient * Value ) = 0;
    virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("b10bf17c-f7ec-4ee2-ad7a-6f42816aec0f"))
Recipients;
    // [ default ] interface IRecipients

struct __declspec(uuid("65c53be7-ed21-4c25-b189-da0e8fad5231"))
IRecipient : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetEMail))
    _bstr_t EMail;
    __declspec(property(get=GetReType))
    long ReType;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    _bstr_t GetEMail ( );
    long GetReType ( );
    IRecipientPtr New (
        _bstr_t Name,
        _bstr_t EMail,
        char recipientType );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_EMail (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_ReType (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_New (
        BSTR Name,
        BSTR EMail,
        char recipientType,
        struct IRecipient * * Value ) = 0;
};

struct __declspec(uuid("dbaaea4b-ad29-47bd-8776-c787d5be28aa"))
Recipient;
    // [ default ] interface IRecipient

struct __declspec(uuid("1e6d8684-755d-4847-bf40-68ec5e4bc1e9"))
IAttachments : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IAttachmentPtr Item[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        struct IAttachment * * Attachment );
    IAttachmentPtr GetItem (
        long index );
    HRESULT Clear ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * Value ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct IAttachment * * Attachment ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IAttachment * * Value ) = 0;
    virtual HRESULT __stdcall raw_Clear ( ) = 0;
};

struct __declspec(uuid("b3a0acb9-3d8c-4999-9e6b-3e44372e11dd"))
Attachments;
    // [ default ] interface IAttachments

struct __declspec(uuid("952f0b99-50b6-44b3-ae0d-700d5b98b416"))
IAttachment : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName))
    _bstr_t Name;
    __declspec(property(get=GetSize))
    long Size;
    __declspec(property(get=GetContentType))
    _bstr_t ContentType;
    __declspec(property(get=GetData,put=PutData))
    _bstr_t Data;
    __declspec(property(get=GetisInline,put=PutisInline))
    VARIANT_BOOL isInline;
    __declspec(property(get=GetBinaryData,put=PutBinaryData))
    _bstr_t BinaryData;
    __declspec(property(get=GetCID))
    _bstr_t CID;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetName ( );
    long GetSize ( );
    _bstr_t GetContentType ( );
    HRESULT SaveToFile (
        _bstr_t FileName );
    _bstr_t GetData ( );
    void PutData (
        _bstr_t Value );
    IAttachmentPtr New (
        _bstr_t FileName,
        _bstr_t ContentType,
        _bstr_t Data );
    VARIANT_BOOL GetisInline ( );
    void PutisInline (
        VARIANT_BOOL Value );
    _bstr_t GetBinaryData ( );
    void PutBinaryData (
        _bstr_t Value );
    _bstr_t GetCID ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_Size (
        long * Value ) = 0;
    virtual HRESULT __stdcall get_ContentType (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_SaveToFile (
        BSTR FileName ) = 0;
    virtual HRESULT __stdcall get_Data (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_Data (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall raw_New (
        BSTR FileName,
        BSTR ContentType,
        BSTR Data,
        struct IAttachment * * Value ) = 0;
    virtual HRESULT __stdcall get_isInline (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_isInline (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_BinaryData (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_BinaryData (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_CID (
        BSTR * Value ) = 0;
};

struct __declspec(uuid("53deca78-c334-4235-9165-1fe7d8912a76"))
Attachment;
    // [ default ] interface IAttachment

struct __declspec(uuid("aed3a6b1-2171-11d2-b77c-0008c73aca8f"))
ISMTPMail : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMessage,put=PutMessage))
    IMessagePtr Message;
    __declspec(property(get=GetContentTransferEncoding,put=PutContentTransferEncoding))
    _bstr_t ContentTransferEncoding;
    __declspec(property(get=GetServerAddress,put=PutServerAddress))
    _bstr_t ServerAddress;
    __declspec(property(get=GetServerPort,put=PutServerPort))
    long ServerPort;
    __declspec(property(get=GetSender,put=PutSender))
    _bstr_t Sender;
    __declspec(property(get=GetReplyTo,put=PutReplyTo))
    _bstr_t ReplyTo;
    __declspec(property(get=GetSubject,put=PutSubject))
    _bstr_t Subject;
    __declspec(property(get=GetBody,put=PutBody))
    _bstr_t Body;
    __declspec(property(get=GetHideRecipients,put=PutHideRecipients))
    _bstr_t HideRecipients;
    __declspec(property(get=GetMailDomain,put=PutMailDomain))
    _bstr_t MailDomain;
    __declspec(property(get=GetLazysend,put=PutLazysend))
    VARIANT_BOOL Lazysend;
    __declspec(property(get=GetCharset,put=PutCharset))
    _bstr_t Charset;
    __declspec(property(get=GetSenderName,put=PutSenderName))
    _bstr_t SenderName;
    __declspec(property(get=GetContentType,put=PutContentType))
    _bstr_t ContentType;
    __declspec(property(get=GetPriority,put=PutPriority))
    long Priority;
    __declspec(property(get=GetMimeVersion,put=PutMimeVersion))
    _bstr_t MimeVersion;
    __declspec(property(get=GetEncoding,put=PutEncoding))
    _bstr_t Encoding;
    __declspec(property(get=GetReturnReceipt,put=PutReturnReceipt))
    VARIANT_BOOL ReturnReceipt;
    __declspec(property(get=GetHTMLBody,put=PutHTMLBody))
    _bstr_t HTMLBody;
    __declspec(property(get=GetLog))
    _bstr_t Log;
    __declspec(property(get=GetLogging,put=PutLogging))
    VARIANT_BOOL Logging;
    __declspec(property(get=GetISOEncodeHeaders,put=PutISOEncodeHeaders))
    VARIANT_BOOL ISOEncodeHeaders;
    __declspec(property(get=GetUsePipelining,put=PutUsePipelining))
    VARIANT_BOOL UsePipelining;
    __declspec(property(get=GetSilent,put=PutSilent))
    VARIANT_BOOL Silent;
    __declspec(property(get=GetErrorCode))
    long ErrorCode;
    __declspec(property(get=GetErrorMessage))
    _bstr_t ErrorMessage;
    __declspec(property(get=GetErrorSource))
    _bstr_t ErrorSource;
    __declspec(property(get=GetSimpleLayout,put=PutSimpleLayout))
    VARIANT_BOOL SimpleLayout;
    __declspec(property(get=GetRecipients))
    _bstr_t Recipients;
    __declspec(property(get=GetDeferredDelivery,put=PutDeferredDelivery))
    DATE DeferredDelivery;
    __declspec(property(get=GetVersion))
    _bstr_t Version;
    __declspec(property(get=GetMemCount))
    long MemCount;
    __declspec(property(get=GetMemSize))
    long MemSize;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL Execute ( );
    HRESULT AppendBodyFromFile (
        _bstr_t FileName );
    HRESULT AppendText (
        _bstr_t Text );
    _bstr_t AddAttachment (
        _bstr_t FileName,
        _bstr_t ContentType );
    _bstr_t AddCustomAttachment (
        _bstr_t FileName,
        _bstr_t Data );
    HRESULT AddRecipient (
        _bstr_t EMail );
    HRESULT AddRecipientCC (
        _bstr_t EMail );
    HRESULT AddRecipientBCC (
        _bstr_t EMail );
    HRESULT AddHeader (
        _bstr_t XHeader,
        _bstr_t Value );
    HRESULT AddNativeHeader (
        _bstr_t Header,
        _bstr_t Value );
    HRESULT ClearRecipients ( );
    HRESULT ClearAttachments ( );
    _bstr_t GetServerAddress ( );
    void PutServerAddress (
        _bstr_t Value );
    long GetServerPort ( );
    void PutServerPort (
        long Value );
    _bstr_t GetSender ( );
    void PutSender (
        _bstr_t Value );
    _bstr_t GetSenderName ( );
    void PutSenderName (
        _bstr_t Value );
    _bstr_t GetReplyTo ( );
    void PutReplyTo (
        _bstr_t Value );
    _bstr_t GetSubject ( );
    void PutSubject (
        _bstr_t Value );
    _bstr_t GetBody ( );
    void PutBody (
        _bstr_t Value );
    _bstr_t GetContentType ( );
    void PutContentType (
        _bstr_t Value );
    long GetPriority ( );
    void PutPriority (
        long Value );
    _bstr_t GetHideRecipients ( );
    void PutHideRecipients (
        _bstr_t Value );
    _bstr_t GetMailDomain ( );
    void PutMailDomain (
        _bstr_t Value );
    VARIANT_BOOL GetLazysend ( );
    void PutLazysend (
        VARIANT_BOOL Value );
    _bstr_t GetCharset ( );
    void PutCharset (
        _bstr_t Value );
    _bstr_t GetContentTransferEncoding ( );
    void PutContentTransferEncoding (
        _bstr_t Value );
    _bstr_t GetMimeVersion ( );
    void PutMimeVersion (
        _bstr_t Value );
    _bstr_t GetEncoding ( );
    void PutEncoding (
        _bstr_t Value );
    HRESULT AddRecipientEx (
        _bstr_t EMail,
        _bstr_t Name );
    VARIANT_BOOL GetReturnReceipt ( );
    void PutReturnReceipt (
        VARIANT_BOOL Value );
    HRESULT LogCustomMessage (
        _bstr_t Message );
    _bstr_t GetLog ( );
    VARIANT_BOOL GetLogging ( );
    void PutLogging (
        VARIANT_BOOL Value );
    _bstr_t GetHTMLBody ( );
    void PutHTMLBody (
        _bstr_t Value );
    HRESULT Close ( );
    VARIANT_BOOL GetISOEncodeHeaders ( );
    void PutISOEncodeHeaders (
        VARIANT_BOOL Value );
    HRESULT ClearCustomHeaders ( );
    VARIANT_BOOL GetUsePipelining ( );
    void PutUsePipelining (
        VARIANT_BOOL Value );
    VARIANT_BOOL GetSilent ( );
    void PutSilent (
        VARIANT_BOOL Value );
    long GetErrorCode ( );
    _bstr_t GetErrorMessage ( );
    _bstr_t GetErrorSource ( );
    VARIANT_BOOL GetSimpleLayout ( );
    void PutSimpleLayout (
        VARIANT_BOOL Value );
    HRESULT GetMessageBodyFromURL (
        _bstr_t bstrURL,
        _bstr_t bstrAuth );
    _bstr_t AddURLAttachment (
        _bstr_t bstrURL,
        _bstr_t bstrAttachAs,
        _bstr_t bstrAuth );
    HRESULT ExtractEmailAddressesFromURL (
        _bstr_t bstrURL,
        _bstr_t bstrAuth );
    _bstr_t GetRecipients ( );
    DATE GetDeferredDelivery ( );
    void PutDeferredDelivery (
        DATE Value );
    _bstr_t GetVersion ( );
    long GetMemCount ( );
    long GetMemSize ( );
    IMessagePtr GetMessage ( );
    void PutMessage (
        struct IMessage * Value );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_Execute (
        VARIANT_BOOL * RetVal ) = 0;
    virtual HRESULT __stdcall raw_AppendBodyFromFile (
        BSTR FileName ) = 0;
    virtual HRESULT __stdcall raw_AppendText (
        BSTR Text ) = 0;
    virtual HRESULT __stdcall raw_AddAttachment (
        BSTR FileName,
        BSTR ContentType,
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_AddCustomAttachment (
        BSTR FileName,
        BSTR Data,
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_AddRecipient (
        BSTR EMail ) = 0;
    virtual HRESULT __stdcall raw_AddRecipientCC (
        BSTR EMail ) = 0;
    virtual HRESULT __stdcall raw_AddRecipientBCC (
        BSTR EMail ) = 0;
    virtual HRESULT __stdcall raw_AddHeader (
        BSTR XHeader,
        BSTR Value ) = 0;
    virtual HRESULT __stdcall raw_AddNativeHeader (
        BSTR Header,
        BSTR Value ) = 0;
    virtual HRESULT __stdcall raw_ClearRecipients ( ) = 0;
    virtual HRESULT __stdcall raw_ClearAttachments ( ) = 0;
    virtual HRESULT __stdcall get_ServerAddress (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_ServerAddress (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_ServerPort (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_ServerPort (
        long Value ) = 0;
    virtual HRESULT __stdcall get_Sender (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_Sender (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_SenderName (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_SenderName (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_ReplyTo (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_ReplyTo (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_Subject (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_Subject (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_Body (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_Body (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_ContentType (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_ContentType (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_Priority (
        long * Value ) = 0;
    virtual HRESULT __stdcall put_Priority (
        long Value ) = 0;
    virtual HRESULT __stdcall get_HideRecipients (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_HideRecipients (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_MailDomain (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_MailDomain (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_Lazysend (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Lazysend (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Charset (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_Charset (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_ContentTransferEncoding (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_ContentTransferEncoding (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_MimeVersion (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_MimeVersion (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall get_Encoding (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_Encoding (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall raw_AddRecipientEx (
        BSTR EMail,
        BSTR Name ) = 0;
    virtual HRESULT __stdcall get_ReturnReceipt (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ReturnReceipt (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall raw_LogCustomMessage (
        BSTR Message ) = 0;
    virtual HRESULT __stdcall get_Log (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_Logging (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Logging (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_HTMLBody (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_HTMLBody (
        BSTR Value ) = 0;
    virtual HRESULT __stdcall raw_Close ( ) = 0;
    virtual HRESULT __stdcall get_ISOEncodeHeaders (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ISOEncodeHeaders (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall raw_ClearCustomHeaders ( ) = 0;
    virtual HRESULT __stdcall get_UsePipelining (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_UsePipelining (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Silent (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_Silent (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_ErrorCode (
        long * Value ) = 0;
    virtual HRESULT __stdcall get_ErrorMessage (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_ErrorSource (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_SimpleLayout (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_SimpleLayout (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall raw_GetMessageBodyFromURL (
        BSTR bstrURL,
        BSTR bstrAuth ) = 0;
    virtual HRESULT __stdcall raw_AddURLAttachment (
        BSTR bstrURL,
        BSTR bstrAttachAs,
        BSTR bstrAuth,
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall raw_ExtractEmailAddressesFromURL (
        BSTR bstrURL,
        BSTR bstrAuth ) = 0;
    virtual HRESULT __stdcall get_Recipients (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_DeferredDelivery (
        DATE * Value ) = 0;
    virtual HRESULT __stdcall put_DeferredDelivery (
        DATE Value ) = 0;
    virtual HRESULT __stdcall get_Version (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_MemCount (
        long * Value ) = 0;
    virtual HRESULT __stdcall get_MemSize (
        long * Value ) = 0;
    virtual HRESULT __stdcall get_Message (
        struct IMessage * * Value ) = 0;
    virtual HRESULT __stdcall put_Message (
        struct IMessage * Value ) = 0;
};

struct __declspec(uuid("aed3a6b3-2171-11d2-b77c-0008c73aca8f"))
SMTPMail;
    // [ default ] interface ISMTPMail

struct __declspec(uuid("14e61a41-8846-11d2-b7e4-0008c73aca8f"))
IPOP3Mail : IDispatch
{};

struct __declspec(uuid("14e61a43-8846-11d2-b7e4-0008c73aca8f"))
POP3Mail;
    // [ default ] interface IPOP3Mail

struct __declspec(uuid("23e86816-772b-4b28-a924-a135cff6469a"))
IPGPKeys : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    IPGPKeyInfoPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IPGPKeyInfoPtr GetItem (
        long index );
    HRESULT AddKey (
        struct IPGPKeyInfo * key );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * Value ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IPGPKeyInfo * * Value ) = 0;
    virtual HRESULT __stdcall raw_AddKey (
        struct IPGPKeyInfo * key ) = 0;
};

struct __declspec(uuid("cef9ea1f-bbca-4e19-87a4-2e26c22f1d26"))
PGPKeys;
    // [ default ] interface IPGPKeys

struct __declspec(uuid("b89d0e7a-0f5b-40ee-8af3-08fa2ed9534f"))
IPGPKeyInfo : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetKeyUser))
    _bstr_t KeyUser;
    __declspec(property(get=GetKeyID))
    _bstr_t KeyID;
    __declspec(property(get=GetKeyCreationDate))
    _bstr_t KeyCreationDate;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetKeyUser ( );
    _bstr_t GetKeyID ( );
    _bstr_t GetKeyCreationDate ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_KeyUser (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_KeyID (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_KeyCreationDate (
        BSTR * Value ) = 0;
};

struct __declspec(uuid("37f2ddbd-5cd9-4cdf-9b30-2a904246c112"))
PGPKeyInfo;
    // [ default ] interface IPGPKeyInfo

struct __declspec(uuid("0c21b3b1-2b11-45f2-8a9e-dcc5032de98a"))
IMailMerge : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetMergeAttachments,put=PutMergeAttachments))
    VARIANT_BOOL MergeAttachments;
    __declspec(property(get=GetMailTemplate,put=PutMailTemplate))
    IMessagePtr MailTemplate;
    __declspec(property(get=GetContinueOnFail,put=PutContinueOnFail))
    VARIANT_BOOL ContinueOnFail;
    __declspec(property(get=GetItem,put=PutItem))
    _bstr_t Item[];
    __declspec(property(get=GetLog))
    IMailMergeResultCollectionPtr Log;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetMergeAttachments ( );
    void PutMergeAttachments (
        VARIANT_BOOL Value );
    IMessagePtr GetMailTemplate ( );
    void PutMailTemplate (
        struct IMessage * Value );
    HRESULT SetDebugMode (
        _bstr_t TestMailAddress,
        long TestCount );
    _bstr_t GetItem (
        _bstr_t VariableName );
    void PutItem (
        _bstr_t VariableName,
        _bstr_t Value );
    IMessagePtr Expand ( );
    IMessagePtr ExpandFromRecordSet (
        const _variant_t & RecordSet );
    HRESULT BulkMerge (
        const _variant_t & RecordSet,
        VARIANT_BOOL enque,
        _bstr_t Maildestination );
    VARIANT_BOOL GetContinueOnFail ( );
    void PutContinueOnFail (
        VARIANT_BOOL Value );
    IMailMergeResultCollectionPtr GetLog ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_MergeAttachments (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_MergeAttachments (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_MailTemplate (
        struct IMessage * * Value ) = 0;
    virtual HRESULT __stdcall put_MailTemplate (
        struct IMessage * Value ) = 0;
    virtual HRESULT __stdcall raw_SetDebugMode (
        BSTR TestMailAddress,
        long TestCount ) = 0;
    virtual HRESULT __stdcall get_Item (
        BSTR VariableName,
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall put_Item (
        BSTR VariableName,
        BSTR Value ) = 0;
    virtual HRESULT __stdcall raw_Expand (
        struct IMessage * * Value ) = 0;
    virtual HRESULT __stdcall raw_ExpandFromRecordSet (
        VARIANT RecordSet,
        struct IMessage * * Value ) = 0;
    virtual HRESULT __stdcall raw_BulkMerge (
        VARIANT RecordSet,
        VARIANT_BOOL enque,
        BSTR Maildestination ) = 0;
    virtual HRESULT __stdcall get_ContinueOnFail (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall put_ContinueOnFail (
        VARIANT_BOOL Value ) = 0;
    virtual HRESULT __stdcall get_Log (
        struct IMailMergeResultCollection * * Value ) = 0;
};

struct __declspec(uuid("0d821067-fcf9-4704-9287-0d8f76fe6513"))
MailMerge;
    // [ default ] interface IMailMerge

struct __declspec(uuid("821aafe5-2f19-47eb-aca9-3b4c1d64ac27"))
ISpeedMailer : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    HRESULT SendMail (
        _bstr_t FromEMail,
        _bstr_t RecipientEMails,
        _bstr_t Subject,
        _bstr_t Body,
        _bstr_t MailServers );
    HRESULT EnqueMail (
        _bstr_t FromEMail,
        _bstr_t RecipientEMails,
        _bstr_t Subject,
        _bstr_t Body,
        _bstr_t MsPickupdirectory );
    HRESULT SendXMLMail (
        _bstr_t XML );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_SendMail (
        BSTR FromEMail,
        BSTR RecipientEMails,
        BSTR Subject,
        BSTR Body,
        BSTR MailServers ) = 0;
    virtual HRESULT __stdcall raw_EnqueMail (
        BSTR FromEMail,
        BSTR RecipientEMails,
        BSTR Subject,
        BSTR Body,
        BSTR MsPickupdirectory ) = 0;
    virtual HRESULT __stdcall raw_SendXMLMail (
        BSTR XML ) = 0;
};

struct __declspec(uuid("90d0a753-ad45-40fd-8c6e-555600ee5eb4"))
SpeedMailer;
    // [ default ] interface ISpeedMailer

struct __declspec(uuid("e05aea1e-bcb1-473a-8b2a-4829d9e1ad23"))
IPGPDecodeResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSigningUsed))
    VARIANT_BOOL SigningUsed;
    __declspec(property(get=GetSignatureGood))
    VARIANT_BOOL SignatureGood;
    __declspec(property(get=GetSuccess))
    VARIANT_BOOL Success;
    __declspec(property(get=GetPGPErrorCode))
    long PGPErrorCode;
    __declspec(property(get=GetPGPErrorMsg))
    _bstr_t PGPErrorMsg;
    __declspec(property(get=GetEncryptionUsed))
    VARIANT_BOOL EncryptionUsed;

    //
    // Wrapper methods for error-handling
    //

    VARIANT_BOOL GetSigningUsed ( );
    VARIANT_BOOL GetSignatureGood ( );
    VARIANT_BOOL GetSuccess ( );
    long GetPGPErrorCode ( );
    _bstr_t GetPGPErrorMsg ( );
    VARIANT_BOOL GetEncryptionUsed ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_SigningUsed (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall get_SignatureGood (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall get_Success (
        VARIANT_BOOL * Value ) = 0;
    virtual HRESULT __stdcall get_PGPErrorCode (
        long * Value ) = 0;
    virtual HRESULT __stdcall get_PGPErrorMsg (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_EncryptionUsed (
        VARIANT_BOOL * Value ) = 0;
};

struct __declspec(uuid("81ca5571-c109-47ae-be1c-2df9cb8999ff"))
PGPDecodeResult;
    // [ default ] interface IPGPDecodeResult

struct __declspec(uuid("08b9999c-dad2-4353-b25b-8ccaffca4d16"))
IPGPDecodeResults : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetBody))
    IPGPDecodeResultPtr Body;
    __declspec(property(get=GetHTMLBody))
    IPGPDecodeResultPtr HTMLBody;
    __declspec(property(get=GetAttachments))
    IPGPDecodeResultCollectionPtr Attachments;

    //
    // Wrapper methods for error-handling
    //

    IPGPDecodeResultPtr GetBody ( );
    IPGPDecodeResultPtr GetHTMLBody ( );
    IPGPDecodeResultCollectionPtr GetAttachments ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Body (
        struct IPGPDecodeResult * * Value ) = 0;
    virtual HRESULT __stdcall get_HTMLBody (
        struct IPGPDecodeResult * * Value ) = 0;
    virtual HRESULT __stdcall get_Attachments (
        struct IPGPDecodeResultCollection * * Value ) = 0;
};

struct __declspec(uuid("ac3f1977-cd10-41b2-9977-7693a4c13377"))
PGPDecodeResults;
    // [ default ] interface IPGPDecodeResults

struct __declspec(uuid("41dba1fa-44f6-4bd5-82df-1a7fdea0475d"))
IPGPDecodeResultCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetItem))
    IPGPDecodeResultPtr Item[];

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    IPGPDecodeResultPtr GetItem (
        long index );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * Value ) = 0;
    virtual HRESULT __stdcall get_Item (
        long index,
        struct IPGPDecodeResult * * Value ) = 0;
};

struct __declspec(uuid("10e321cc-683e-4060-b938-4f53234d9593"))
PGPDecodeResultCollection;
    // [ default ] interface IPGPDecodeResultCollection

struct __declspec(uuid("05a0bddf-8823-4cb7-95be-7b3d6292a745"))
IMailMergeResult : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetEMail))
    _bstr_t EMail;
    __declspec(property(get=GetMessage))
    _bstr_t Message;

    //
    // Wrapper methods for error-handling
    //

    _bstr_t GetEMail ( );
    _bstr_t GetMessage ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_EMail (
        BSTR * Value ) = 0;
    virtual HRESULT __stdcall get_Message (
        BSTR * Value ) = 0;
};

struct __declspec(uuid("df74a139-e482-442c-89c2-72b1881d5e55"))
MailMergeResult;
    // [ default ] interface IMailMergeResult

struct __declspec(uuid("3f88fa4e-551c-4a72-a436-12f0a35e3d74"))
IMailMergeResultCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetItem))
    IMailMergeResultPtr Item[];
    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    IMailMergeResultPtr GetItem (
        long index );
    long GetCount ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Item (
        long index,
        struct IMailMergeResult * * Value ) = 0;
    virtual HRESULT __stdcall get_Count (
        long * Value ) = 0;
};

struct __declspec(uuid("84ad684c-6e53-42bc-b146-ebe91d13b294"))
MailMergeResultCollection;
    // [ default ] interface IMailMergeResultCollection

//
// Wrapper method implementations
//

#include "jmail.tli"

} // namespace jmail

#pragma pack(pop)
